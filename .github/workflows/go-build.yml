name: Build and Release

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
          - goos: linux
            goarch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Read version
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Build and package
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ env.VERSION }}
        run: |
          NAME=openvpnadvanced-${VERSION}-${GOOS}-${GOARCH}
          BIN=$NAME
          if [ "$GOOS" = "windows" ]; then
            BIN="$BIN.exe"
          fi

          go build -o "$BIN" ./cmd
          mkdir -p dist/$NAME
          mv "$BIN" dist/$NAME/

          cd dist
          zip -r "${NAME}.zip" "$NAME"
          sha256sum "${NAME}.zip" > "${NAME}.zip.sha256"
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: builds
          path: dist/*.zip*
  
  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: builds
          path: dist

      - name: Extract changelog
        id: changelog
        run: |
          VERSION_TAG="v${{ env.VERSION }}"
          LOG=$(awk "/^## ${VERSION_TAG}/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ env.RELEASE_BODY }}
          prerelease: ${{ contains(env.VERSION, '-rc') || contains(env.VERSION, '-beta') }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
